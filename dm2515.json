{
  "login": "dm2515",
  "notes": [
    "This test contains two 'fill-in-the-blanks' and eight multiple choice",
    "questions. In each case you should fill in the values for JSON keys matching 'answer*'.",
    "",
    "There are 10 questions, each of which is worth (nominally) 4 marks each, for a total of 40.",
    "",
    "Each fill-in-the-blanks question has four answer fields, each is worth 1 mark",
    "for a correct answer, and 0 for an incorrect answer.",
    "",
    "The answer for multiple choice questions should be the index of the",
    "answer you are selecting (i.e. and integer from 0 to 3). This can be",
    "expressed either as an integer, or as string containing an integer",
    "(just type over the '?' that is pre-filled in). Any missing or invalid",
    "answer indices (e.g. '?') will result in zero marks for that question.",
    "",
    "In the case of multiple choice questions, you should indicate your",
    "confidence using the 'confidence' key:",
    "",
    "  High:   5 marks for a correct answer,   -2 for an incorrect answer.",
    "  Medium: 4 marks for a correct answer,   -1 for an incorrect answer.",
    "  Low:    3 marks for a correct answer,    0 for an incorrect answer.",
    "  ",
    "The confidence value is not case sensitive. A missing or invalid",
    "confidence value will be assumed to be 'Medium'.",
    "",
    "Marks are saturated below at 0 and above at 40.",
    "",
    "This test is 10% of your module marks. You should not collaborate with",
    "other students on the test, nor discuss the questions during the test",
    "period. It is open book in the sense that you can use the lecture notes,",
    "books, and other passive resources. Any active questions (posting to",
    "forums, StackOverflow, etc.) is not allowed.",
    "",
    "Note that a confidence level of \"High\" implies that you could",
    "verbally defend your answer if necessary, or could produce notes to",
    "support your reasoning. A confidence level of \"Medium\" implies",
    "that you can at least explain how you were able to discount",
    "some of the options. It is not expected that such a defence is",
    "necessary, but remember that standard rules on plagiarism and",
    "cheating apply to this test.",
    "",
    "Genuine errors in the questions or answers (not just typoes or grammar",
    "problem) can be highlighted by attaching a key called \"error\" to the",
    "question, with a string value or array of strings describing the problem.",
    "A correct error string gets 6 marks for the question (regardless of",
    "what answer is given). An incorrect/invalid error string gets a penalty",
    "of -1, then the given answer is evaluated. Even if there is an error string,",
    "you must still choose an answer and a confidence.",
    "",
    "Submit your completed JSON file to blackboard. You can submit",
    "as many times as you like before the deadline.",
    ""
  ],
  "questions": [
    {
      "qid": 0,
      "question": [
        "Give examples of strings matching the regex '(a?io)*s+|s'",
        "containing 1, 2, 3, and 4 characters. The ' character is not part of the regex."
      ],
      "answer_length1": "s",
      "answer_length2": "ss",
      "answer_length3": "ios",
      "answer_length4": "aios"
    },
    {
      "qid": 1,
      "question": [
        "Give examples of strings matching the regex 'p|[^h]x?[3-7A-D^k]+|[x]*'",
        "containing 1, 2, 3, and 4 characters. The ' character is not part of the regex."
      ],
      "answer_length1": "p",
      "answer_length2": "xx",
      "answer_length3": "83D",
      "answer_length4": "Mx5B"
    },
    {
      "qid": 2,
      "question": [
        "What is the asymptotic time complexity of matching a string with n characters",
        "against a regex with k alternatives (i.e. '(A1|A2|...|Ak)' where each of A1..Ak is",
        "a regular expression)?"
      ],
      "choices": {
        "0": "O(n log k)",
        "1": "O(n)",
        "2": "Omega(n+k)",
        "3": "O(n-k)"
      },
      "answer": "1",
      "confidence": "Medium"
    },
    {
      "qid": 3,
      "question": [
        "Is the following grammar regular? :",
        "  1: X -> 'a' X",
        "  2: X -> 'b' X",
        "  3: X -> 'z' X",
        "  4: X -> 'b' 'a'"
      ],
      "choices": {
        "0": "No, because of rules 1 and 2.",
        "1": "Yes, because it is right-linear",
        "2": "No, because it is not left-linear or right-linear.",
        "3": "Yes, because it can be written as a regular expression"
      },
      "answer": "2",
      "confidence": "High"
    },
    {
      "qid": 4,
      "question": [
        "A regular expression over an alphabet of k characters has been converted",
        "to an NFA with m states. If it is now converted to a DFA, what is a (tight) worst-case",
        "space complexity for the number of transition table entries? "
      ],
      "choices": {
        "0": "O(2^m)",
        "1": "O(k 2^m)",
        "2": "O(2^(k+m))",
        "3": "O(2^k)"
      },
      "answer": "1",
      "confidence": "Medium"
    },
    {
      "qid": 5,
      "question": [
        "An NFA contains an epsilon edge from state SA to state SB.",
        "Given there could be many other edges and states, which of the following is incorrect?"
      ],
      "choices": {
        "0": "SB is in the epsilon closure of SA",
        "1": "SA is not in the epsilon closure of SB",
        "2": "It is possible to move from SA to SB without consuming a character.",
        "3": "Consuming a character could take us from SB to SA"
      },
      "answer": "1",
      "confidence": "Medium"
    },
    {
      "qid": 6,
      "question": [
        "Many regex engines support an extension that matches between x and y copies",
        "of a pattern A, usually with the syntax A{x,y}. Which of the following is true?"
      ],
      "choices": {
        "0": "This extension requires back-tracking.",
        "1": "The extension could lead to an O(y) increase in the number of DFA states.",
        "2": "The extension could lead to an O(x) increase in the number of DFA states.",
        "3": "The regex engine can re-write the extension in terms of + (Kleene Cross) to get a standard regex"
      },
      "answer": "0",
      "confidence": "Medium"
    },
    {
      "qid": 7,
      "question": [
        "A designer has converted a regex to an NFA with k states and m input characters.",
        "Is it possible to implement the NFA as a Moore machine, such that it consumes one character per cycle?"
      ],
      "choices": {
        "0": "Yes, but they must convert it to a DFA first using subset-construction.",
        "1": "No, you cannot implement an NFA as a Moore machine due to possible epsilon transitions.",
        "2": "No, it needs to be implemented as a Mealy machine",
        "3": "Yes, but you need k bits of state."
      },
      "answer": "1",
      "confidence": "Medium"
    },
    {
      "qid": 8,
      "question": "Which of the following is true of lexers?",
      "choices": {
        "0": "A lexer must be generated at compile-time.",
        "1": "A lexer groups characters into terminals.",
        "2": "A lexer cannot detect errors.",
        "3": "A lexer does not use a grammar."
      },
      "answer": "0",
      "confidence": "Medium"
    },
    {
      "qid": 9,
      "question": "What is the purpose of an accepting state in a lexing automata?",
      "choices": {
        "0": "The lexer can use the final accepting state to choose a semantic action.",
        "1": "Lexing of the current token should stop once an accepting state is reached.",
        "2": "It records the fact that the end of stream character has been reached.",
        "3": "It takes the lexer one step closer to enlightenment."
      },
      "answer": "0",
      "confidence": "Medium"
    }
  ]
}